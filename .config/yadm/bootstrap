#!/bin/bash
###############################################################################
# Klas Mellbourn's dotfile
#
# https://github.com/Mellbourn/dotfiles
# https://dotfiles.github.io/
#
# Many settings inspired by
# https://github.com/mathiasbynens/dotfiles/blob/master/.macos
#
# Nice links here
# https://medium.com/@webprolific/getting-started-with-dotfiles-43c3602fd789#.2d3cfjv7d
###############################################################################
set -e

if grep -q Raspbian /etc/os-release 2>/dev/null; then
  DOTFILES_LITE=1
fi
export PROCESSOR_ARCHITECTURE=${PROCESSOR_ARCHITECTURE:-$(uname -p)}
if [ -f "/Library/Apple/System/Library/Receipts/com.apple.pkg.RosettaUpdateAuto.bom" ]; then
  export ROSETTA_INSTALLED=1
fi
if [[ $PROCESSOR_ARCHITECTURE != 'arm' || -n "$ROSETTA_INSTALLED" ]]; then
  export X86_OR_ROSETTA=1
fi

if [ -x "$(command -v lsb_release)" ] && [[ $(lsb_release -si) == 'Ubuntu' ]]; then
  #OS_UBUNTU=1
  if dpkg -l ubuntu-desktop >/dev/null; then
    UBUNTU_DESKTOP=1
  fi
fi

pushd ~
yadm submodule update --init --recursive --remote
popd

# Install `zinit` if not installed
if [ ! -d ~/.zinit ]; then
  mkdir ~/.zinit
  chmod go-w ~/.zinit # to avoid insecure directories complaint
  git clone https://github.com/zdharma-continuum/zinit.git ~/.zinit/bin
fi

# install asdf version manager https://asdf-vm.com/
if [ ! -d ~/.asdf ]; then
  git clone https://github.com/asdf-vm/asdf.git ~/.asdf
fi
asdf update
asdf plugin update --all

set +e
asdf plugin add ruby
asdf plugin add python
asdf plugin add bundler
# asdf direnv doesn't seem absolutely necessary, but could improve performance. 2.30.2 works
asdf plugin add direnv
asdf plugin add lazydocker https://github.com/comdotlinux/asdf-lazydocker.git
set -e
asdf install direnv latest
asdf global direnv latest
# if no versions are installed, the asdf plugin will fall back to "system"
asdf install lazydocker latest && asdf global lazydocker latest

if [[ $(uname) == 'Darwin' ]]; then
  ###############################################################################
  # macOS specific installations
  ###############################################################################
  OS_MAJOR_VERSION=$(sw_vers -productVersion | cut -d. -f1)
  BIG_SUR_MAJOR_VERSION=11
  MONTEREY_MAJOR_VERSION=12

  ###############################################################################
  # App store                                                                   #
  ###############################################################################
  brew install mas || true

  # Xcode
  mas install 497799835
  mas install 1176074088                  # Termius - SSH Client
  mas install 1529448980                  # Reeder 5
  mas install 1037779758                  # Best Trace
  mas install 441258766                   # Magnet
  mas install 1091189122                  # 熊掌記
  mas install 539883307                   # LINE
  mas install 425424353                   # The Unarchiver

  if [[ -n $X86_OR_ROSETTA ]]; then
    # Microsoft Remote Desktop 10 1295203466
    mas install 1295203466                  # Microsoft Remote Desktop
  fi

  # upgrade all
  if [ "$OS_MAJOR_VERSION" -ge "$BIG_SUR_MAJOR_VERSION" ]; then
    mas upgrade
  fi

  xcode-select --install || true

  ###############################################################################
  # Homebrew                                                                    #
  ###############################################################################

  if ! hash brew 2>/dev/null; then
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi

  brewSafeUninstall() {
    if brew list "$@" 2>/dev/null; then
      brew uninstall "$@"
    fi
  }

  brewSafeUninstallCask() {
    if brew list --cask "$@" 2>/dev/null; then
      brew uninstall --cask "$@"
    fi
  }

  brewSafeUntap() {
    if brew tap "$@" 2>/dev/null; then
      brew untap "$@"
    fi
  }

  # some uninstalls must be made before update
  brewSafeUninstallCask virtualbox
  brewSafeUninstall gdu

  brew cleanup
  brew update
  brew upgrade
  # is a separate upgrade for casks redundant?
  #brew upgrade --cask
  brew tap aws/tap                # for aws-sam-cli
  brew tap homebrew/cask-fonts    # for Nerd Fonts
  brew tap homebrew/cask-versions # for google-chrome-beta
  # enables searching brew for commands not found, e.g. when. https://github.com/Homebrew/homebrew-command-not-found
  brew tap homebrew/command-not-found

  # not all computers need logitech drivers, also, these need sudo
  brew install --cask homebrew/cask-drivers/logitech-gaming-software
  brew install --cask homebrew/cask-drivers/logitech-options

  # remove brews here that were previously installed, to sync between machines
  #brewSafeUntap wix/brew # for AppleSimulatorUtils
  #for formula in zsh-autosuggestions ilmbase asciinema cheat fortune git-number z.lua weechat broot deno htop rbenv applesimutils node@14 nodebrew asdf pipenv pyenv-virtualenvwrapper pyenv-virtualenv pyenv openjdk@11 transcrypt nginx cloc mosh; do
  #  brewSafeUninstall $formula
  #done

  #for cask in luna-display zeplin zenmap pokerth dash controlplane fork keycastr postman shortcat tor-browser tripmode stunnel java8 p4v authy; do
  #  brewSafeUninstallCask $cask
  #done

  # this must be in alphabetical order!
  # maybe add these eventually:
  # haskell-stack
  # and then: cargo install viu https://github.com/atanunq/viu
  apps="
atuin
awscli
bash
bash-completion
bat
choose-rust
coreutils
diff-so-fancy
direnv
dockutil
duf
duti
eth-p/software/bat-extras-batgrep
exa
fd
findutils
fx
fzf
gawk
gh
git
git-cliff
git-crypt
git-delta
git-extras
git-lfs
git-recent
glances
gnu-sed
gnupg
gpg-tui
gradle
grc
grep
gron
highlight
htop
hyperfine
imagemagick
jesseduffield/lazygit/lazygit
jq
less
librsvg
lnav
lsd
ncdu
neovim
prettyping
procs
react-native-cli
ripgrep
rust
shellcheck
shfmt
speedtest-cli
thefuck
tig
tmux
tree
vim
volta
watch
watchman
wget
yadm
yarn
zoxide
zsh
"
  # note: yarn will install node, which you might want to remove, since it is handled by nvm
  alreadyInstalled=$(brew list --formula)
  installTheseLines=$(comm -23 <(echo "$apps") <(echo "$alreadyInstalled"))
  installThese=${installTheseLines//$'\n'/ }
  echo "$installThese" | xargs brew install

  # TODO: add more when better arm support: philips-hue-sync plex imageoptim private-internet-access mockoon
  casks="
adobe-acrobat-reader
alfred
docker
flipper
font-meslo-lg-nerd-font
font-sauce-code-pro-nerd-font
google-chrome-beta
google-cloud-sdk
iina
iterm2
jetbrains-toolbox
microsoft-edge
microsoft-teams
monitorcontrol
notion
setapp
sound-control
switchhosts
telegram
tower
visual-studio-code
wechat
"

  alreadyInstalled=$(brew list --cask)
  installTheseLines=$(comm -23 <(echo "$casks") <(echo "$alreadyInstalled"))
  installThese=${installTheseLines//$'\n'/ }
  echo "$installThese" | xargs brew install --cask

  if [[ $PROCESSOR_ARCHITECTURE == 'arm' ]]; then
    #
  fi
  # arm part ends

  if [ -d ~/.tmux/plugins ]; then
    for plugin in ~/.tmux/plugins/*; do
      set +e
      pushd "$plugin"
      git pull
      git submodule update --init --recursive
      popd
      set -e
    done
  fi

  # ? XXX: this is needed to suppress zsh message "compinit: insecure directories""
  chmod g-w "$HOMEBREW_PREFIX"/share ~/.zsh-personal-completions

fi ############################################################################
# configuration for both Mac and Linux
###############################################################################

version_gte() {
  printf '%s\n%s' "$1" "$2" | sort -C -V -r
}
if [ -x "$(command -v cargo)" ] && version_gte "$(cargo --version | cut -d " " -f2)" 1.0.0; then
  cargo install --verbose cargo-update || true
  cargo install --verbose termimage || true
  if ! [ -x "$(command -v atuin)" ]; then
    cargo install --verbose atuin || true
  fi
fi

# this seems healthy to do every now and then to make sure zsh completion works
trash ~/.zcompdump* ~/.zcompcache 2>/tmp/zcomp_delete_error.txt || true

# atuin completion
if [ -n "$GENCOMPL_FPATH" ] && [[ -x "$(command -v atuin)" ]]; then
  mkdir -p "$GENCOMPL_FPATH"
  atuin gen-completions --shell zsh --out-dir "$GENCOMPL_FPATH"
fi

# vim
mkdir -p ~/.vim/autoload
wget --show-progress -qNP ~/.vim/autoload https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

if ! [ -f ~/.ssh/id_rsa ]; then
  eval "$(ssh-agent -s)"
  if [[ $(uname) == 'Darwin' ]]; then
    ssh-add -K ~/.ssh/id_rsa_github
    ssh-add -K ~/.ssh/id_rsa_farrrr
  else
    ssh-add
  fi
fi

# add tmux-256color terminfo to ~/.terminfo
curl -L https://invisible-island.net/datafiles/current/terminfo.src.gz >/tmp/terminfo.src.gz
gunzip -f /tmp/terminfo.src.gz
/usr/bin/tic -xe tmux-256color /tmp/terminfo.src

# fonts
if [[ $(uname) == 'Darwin' || -n $UBUNTU_DESKTOP ]]; then
  if [[ $(uname) == 'Darwin' ]]; then
    FONT_DIRECTORY=~/Library/Fonts
  else
    mkdir -p ~/.local/share/fonts
    FONT_DIRECTORY=~/.local/share/fonts
  fi
fi

if [ -x "$(command -v zsh)" ]; then
  zsh -ic "zinit self-update; zinit update --all; zinit cclear"
fi

# set up alternate gitconfig file used to determine local settings
yadm alt

if [[ -x "$(command -v atuin)" ]]; then
  atuin import auto
  # you have to register atuin once
  # atuin sync || atuin login -u Mellbourn2
fi

###############################################################################
# development
###############################################################################

docker system prune -f 2>>/tmp/docker_system_prune.err.txt || true

function zsh_performance_measurements() {
  ~/bin/mezsh -m 5
}

############################################################################
# configuration for just Linux
###############################################################################
if [[ $(uname) == 'Linux' ]]; then

  # do some cleanup
  if [ -x "$(command -v trash-empty)" ]; then
    trash-empty 30
  fi
  # unfortunately trash-empty 0.12 does not clean NTFS mounted file systems
  ~/bin/trash-empty-wsl +30

  zsh_performance_measurements
  exit 0
fi ############################################################################
# mac specific configurations
###############################################################################

if ! [ -f ~/.fzf."$SHELLNAME" ]; then
  "$HOMEBREW_PREFIX"/opt/fzf/install --key-bindings --completion --no-update-rc
fi

###############################################################################
# development
###############################################################################
# Is node-gyp really necessary?
#npm i -g npm node-gyp
# stopped working with volta
if [ ! -d "$HOME"/.volta ]; then
  npm update -g
fi
# save some disk
xcrun simctl delete unavailable || true

# remove itunes from login items. This way it does not open when you plug in an iPhone
osascript -e 'tell application "System Events" to delete login item "iTunesHelper"' 2>/tmp/delete_itunes_helper_error.txt || true

###############################################################################
# Associate filetypes to apps that should open them                           #
###############################################################################
# open in Visual Studio Code
duti -s com.microsoft.VSCode .js all           # javascript - extensions work too
duti -s com.microsoft.VSCode .ts all           # typescript
duti -s com.microsoft.VSCode com.apple.log all # .log
duti -s com.microsoft.VSCode public.json all
duti -s com.microsoft.VSCode public.plain-text all # text files
duti -s com.microsoft.VSCode public.text all       # does this have a real effect?
duti -s com.microsoft.VSCode public.xml all
duti -s com.microsoft.VSCode public.yaml all
# seems to have no effecxt: public.data, .lock
# open in chrome
#duti -s com.google.chrome public.svg-image all # .svg

###############################################################################
# Finder                                                                      #
###############################################################################
# show hidden files
defaults write com.apple.finder AppleShowAllFiles -bool true
# Show all filename extensions
defaults write NSGlobalDomain AppleShowAllExtensions -bool true
# Finder: show status bar
defaults write com.apple.finder ShowStatusBar -bool true
# Show Path bar in Finder
defaults write com.apple.finder ShowPathbar -bool true
# Use list view in all Finder windows by default (won't affect folders where there is already a DS_Store)
defaults write com.apple.finder FXPreferredViewStyle -string "Nlsv"
# When performing a search, search the current folder by default
defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"
# Disable the warning when changing a file extension
defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false
# show "Quit" menu item for finder
defaults write com.apple.finder QuitMenuItem -bool true

###############################################################################
# Sound                                                                       #
###############################################################################
# Play feedback when volume is changed
defaults write -g com.apple.sound.beep.feedback -int 1
# Change the alert beep sound
if [ -f /System/Library/Sounds/Pop.aiff ]; then
  defaults write .GlobalPreferences com.apple.sound.beep.sound /System/Library/Sounds/Pop.aiff
fi

###############################################################################
# Performance                                                                 #
###############################################################################
# reduce transparency to make WindowServer take less CPU, but looks like shit
#defaults write com.apple.universalaccess reduceTransparency 1

###############################################################################
# Miscellaneous                                                               #
###############################################################################
# Save screenshots to Pictures
defaults write com.apple.screencapture location "${HOME}/Pictures"

# reopen previous windows when starting an app
defaults write NSGlobalDomain NSQuitAlwaysKeepsWindows -bool true

# don't restore images in preview
defaults write com.apple.Preview NSQuitAlwaysKeepsWindows -bool false

# Expand save panel by default
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true

# Make animated dialog boxes, like the save, appear faster (0.2 is default)
# did this make dialogs appear slower?
#defaults write NSGlobalDomain NSWindowResizeTime .05

# Expand print panel by default - these don't work anymore? (but expanded state is preserved between restarts)
#defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
#defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true

# show battery percent
defaults write com.apple.menuextra.battery ShowPercent YES

# make clock show only time, so it can be clickable in Big Sur (to show notification center)
defaults write com.apple.menuextra.clock DateFormat -string "HH:mm"

# set TextEdit default format to plain text
defaults write com.apple.TextEdit RichText -int 0

# smoother font on low DPI https://code.visualstudio.com/updates/v1_28#_blurriness-on-macos-mojave
# Apple doesn't intend to support this option https://intellij-support.jetbrains.com/hc/en-us/articles/360016827360-Reporting-font-rendering-problems
#defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO
defaults delete CGFontRenderingFontSmoothingDisabled || true

# set screen saver to activate after 20min instead of 5min
# defaults -currentHost write com.apple.screensaver idleTime 1200

if [ "$OS_MAJOR_VERSION" -ge "$MONTEREY_MAJOR_VERSION" ]; then
  # brew doctor will always fail on Monterey while it is in beta
  set +e
fi
brew doctor
set -e
zsh_performance_measurements
